I5=3          ; able to run PLCs

I7100=1473    ; Servo IC1 Max Phase/PWM Frequency Control
I7101=3       ; Servo IC1 Phase Clock Frequency Control
I7102=1       ; Servo IC1 Servo Clock Frequency Control

I7000=1473    ; Servo IC0 Max Phase/PWM Frequency Control
I7001=3       ; Servo IC0 Phase Clock Frequency Control
I7002=1       ; Servo IC0 Servo Clock Frequency Control

I10=1677653   ; Servo Interrupt Time



I19 = 6807    ; Clock source, MACRO IC 0
I6800 = I7000 ; Macro IC 0 MaxPhase/PWM Frequency Control
I6801 = I7001 ; Macro IC 0 Phase Clock Frequency Control
I6802 = I7002 ; Macro IC 0 Servo Clock Frequency Control

I85=1 ; Station number #1 (if multiple slaves

I6840=$4080 ; Macro IC0 Ring Configuration/Status, typical slave setting
I6841=$0FF333 ; Macro IC0 Node Activate Ctrl (Servo nodes 0, 1, 4, 5, 8, 9, 12, 13)

#define RingCheckPeriod 20 ; Suggested Ring Check Period [msec]
#define FatalPackErr 15 ; Suggested Fatal Packet Error Percentage [%]
I80=INT(RingCheckPeriod *8388608/I10/(I8+1)+1)  ; Macro Ring Check Period [Servo Cycles]
I81=INT(I80* FatalPackErr /100+1)               ; Macro Maximum Ring Error Count
I82=I80-I81*4                                   ; Macro Minimum Sync Packet Count

I644=$0;$178437    ; Macro IC0 Node 9 Command Address. Torque Mode
I844=$17843F    ; Macro IC0 Node 13 Command Address. Torque Mode

I8000=$6800BF ; Parallel read of Y/X:$BF
I8001=$018018 ; 24 bits starting at X bit0
I8002=$EC0001 ; Integrate result from I8001
I8003=$68013F ; Parallel read of Y/X:$13F
I8004=$018018 ; 24 bits starting at X bit0
I8005=$EC0004 ; Integrate result from I8004
I8006=$6801BF ; Parallel read of Y/X:$1BF
I8007=$018018 ; 24 bits starting at X bit0
I8008=$EC0007 ; Integrate result from I8007
I8009=$68023F ; Parallel read of Y/X:$23F
I8010=$018018 ; 24 bits starting at X bit0
I8011=$EC000A ; Integrate result from I8010
I8012=$6802BF ; Parallel read of Y/X:$2BF
I8013=$018018 ; 24 bits starting at X bit0
I8014=$EC000D ; Integrate result from I8013
I8015=$68033F ; Parallel read of Y/X:$33F
I8016=$018018 ; 24 bits starting at X bit0
I8017=$EC0010 ; Integrate result from I8016
I8018=$6803BF ; Parallel read of Y/X:$3BF
I8019=$018018 ; 24 bits starting at X bit0
I8020=$EC0013 ; Integrate result from I8019
I8021=$68043F ; Parallel read of Y/X:$43F
I8022=$018018 ; 24 bits starting at X bit0
I8023=$EC0016 ; Integrate result from I8022

I8024=$6F8420 ; Parallel read of Y/X:$78420
I8025=$018000 ; 24 bits starting at Y bit0
I8026=$EC0019 ; Integrate result from I8025
I8027=$6F8424 ; Parallel read of Y/X:$78424
I8028=$018000 ; 24 bits starting at Y bit0
I8029=$EC001C ; Integrate result from I8028
I8030=$6F8428 ; Parallel read of Y/X:$78428
I8031=$018000 ; 24 bits starting at Y bit0
I8032=$EC001F ; Integrate result from I8031
I8033=$6F842C ; Parallel read of Y/X:$7842C
I8034=$018000 ; 24 bits starting at Y bit0
I8035=$EC0022 ; Integrate result from I8030
I8036=$6F8430 ; Parallel read of Y/X:$78430
I8037=$018000 ; 24 bits starting at Y bit0
I8038=$EC0025 ; Integrate result from I8037
I8039=$6F8434 ; Parallel read of Y/X:$78434
I8040=$018000 ; 24 bits starting at Y bit0
I8041=$EC0028 ; Integrate result from I8040
I8042=$6F8438 ; Parallel read of Y/X:$78438
I8043=$018000 ; 24 bits starting at Y bit0
I8044=$EC002B ; Integrate result from I8043
I8045=$6F843C ; Parallel read of Y/X:$7843C
I8046=$018000 ; 24 bits starting at Y bit0
I8047=$EC002E ; Integrate result from I8046

I8048=$78108

I8049=$0



P8000=0 ; Handshaking flag
Open PLC 2 Clear
IF (P8000 = 1)
  CMD"#6K"
  I5111= 250*8388608/I10 While(I5111>0) EndW

  I644 = $0
  I603 = $3531
  I604 = $3531
  I683 = $3512
  I5111= 250*8388608/I10 While(I5111>0) EndW

  CMD"#6$"
  I5111= 500*8388608/I10 While(I5111>0) EndW

  CMD"#6K"
  I5111= 250*8388608/I10 While(I5111>0) EndW

  I644 = $178437
  I657 = 0
  I658 = 0
  I603 = $3531
  I604 = $3531
  I683 = $352A
  I5111= 250*8388608/I10 While(I5111>0) EndW

  P8000=0
endif
Close



Open PLC 1 Clear
DIS PLC 0
DIS PLCC 0..31
DIS PLC 2..31

CMD^K

// Axis 1 Settings
CMD"WX:$78014,$F8CDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$F84DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$F00DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 2 Settings
CMD"WX:$78014,$F9CDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$F94DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$F10DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 3 Settings
CMD"WX:$78014,$FACDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$FA4DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$F20DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 4 Settings
CMD"WX:$78014,$FBCDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$FB4DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78014,$F30DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 5 Settings
CMD"WX:$78114,$F8CDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$F84DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$F00DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 6 Settings
CMD"WX:$78114,$F9CDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$F94DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$F10DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 7 Settings
CMD"WX:$78114,$FACDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$FA4DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$F20DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

// Axis 8 Settings
CMD"WX:$78114,$FBCDFE" ; Select axis # and set motor mode (Stepper)
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$FB4DFE" ; Clear error(s) on selected axis in stepper mode
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW
CMD"WX:$78114,$F30DFE" ; Save and write protect channel from strobe word
I5111 = 50 * 8388608/I10 While(I5111 > 0)EndW

Ena PLC 2
Dis PLC 1

Close





I15=0                       ; Trigonometric calculation in degrees
#define MaxPhaseFreq  P8000 ; Max Phase Clock [KHz]
#define PWMClk        P8001 ; PWM Clock [KHz]
#define PhaseClk      P8002 ; Phase Clock [KHz]
#define ServoClk      P8003 ; Servo Clock [KHz]

MaxPhaseFreq=117964.8/(2*I7000+3)
PWMClk=117964.8/(4*I7000+6)
PhaseClk=MaxPhaseFreq/(I7001+1)
ServoClk=PhaseClk/(I7002+1)

I603=$3531 I604=$3531   ; Motor 6 position and velocity feedback
I602=$07810A            ; Motor 6 Output Address
I682=$07810E            ; Motor 6 Current Feedback Address
I684=$FFFC00            ; Motors 6 Current Loop Feedback Mask, 14-bit (Geo Brick LV Specific)
I672=512                ; Commutation Phase Angle.2-Phase opposite voltage & current sign (Geo Brick LV Specific)

I7120=3

I625=$078108            ; Motor 6 Flag Address
I624=$800401            ; Motor 6 Flag Control. High True Amp Fault, disable 3rd Harmonic
I683=$3512              ; Motor 6 on-going Commutation Address (ECT Integration Result)
I670=1                  ; Motor 6 Single cycle size
I671=65536              ; Microsteps per Ixx70 commutation cycles

I669=42.667 ; Motor 6 Output Command Limit

I666=0.95 * I7000 ; Motor #6 PWM Scale Factor, typical setting

#define ContCurrent 2
#define PeakCurrent 6
#define MaxADC      33.85 ; Brick LV full range ADC reading (see electrical specifications)
#define ServoClk    P8003 ; [KHz] Computed in Dominant Clock Settings Section
#define I2TOnTime   1 ; Time allowed at peak Current [sec]
#define VoltOutLimit  P7007 ; This is Ixx69 normally used in direct digital PWM

I657=INT(32767*(ContCurrent*1.414/MaxADC)*cos(30))
I677=I657/SQRT(2)
VoltOutLimit=INT(32767*(PeakCurrent*1.414/MaxADC)*cos(30))
I658=INT((VoltOutLimit*VoltOutLimit-I657*I657)*ServoClk*1000*I2TOnTime/(32767*32767))

I680=0 I673=0 I674=0 ;
I681=$3512 ; Motor 6 Power-On Commutation, Integrated Output #6
I691=$500000  ; Mtr 6 Pwr-on Pos. format Read 16 (11+5) bits of X register Ixx81

I630=250 ;
I631=0 ;
I632=1600 ;
I633=100 ;
I634=1 ;
I635=0 ;
I636=0 ;
I637=0 ;
I638=0 ;
I639=0 ;


I661=0.005
I662=0
I676=0.05

// Enable motor and comutation
I600=1
I601=1

I622=10
I619=0.1
